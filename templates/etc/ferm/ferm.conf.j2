# IPv4
domain ip {
    table filter {
        chain INPUT {
            policy DROP;

            # Established incoming connections are accepted.
            mod state state (RELATED ESTABLISHED) ACCEPT;

            # Traffic on the loopback interface is accepted.
            interface lo ACCEPT;
        }

        chain OUTPUT {
            policy DROP;

            # Established outgoing connections are accepted.
            mod state state (RELATED ESTABLISHED) ACCEPT;

            # White-list access to local resources
            outerface lo {
                # White-list access to Tor's SOCKSPort's
                daddr 127.0.0.1 proto tcp syn dport 9050 {
                    mod owner uid-owner root ACCEPT;
                }
                daddr 127.0.0.1 proto tcp syn mod multiport destination-ports (9050 9061 9062 9151) {
                    mod owner uid-owner {{ host_user }} ACCEPT;
                }

                # White-list access to Tor's ControlPort
                daddr 127.0.0.1 proto tcp dport 9051 {
                    mod owner uid-owner {{ host_user }} ACCEPT;
                    # Needed by a workaround in tordate (NM's 20-time.sh hook)
                    # for temporarily changing Tor's logging severity.
                    mod owner uid-owner root ACCEPT;
                }

                # White-list access to Tor's TransPort
                daddr 127.0.0.1 proto tcp dport 9040 {
                    mod owner uid-owner {{ host_user }} ACCEPT;
                }

                # White-list access to system DNS and Tor's DNSPort
                daddr 127.0.0.1 proto udp dport (53 5353) {
                    mod owner uid-owner {{ host_user }} ACCEPT;
                }
            }
            # clearnet is allowed to connect to any TCP port via the
            # external interfaces (but lo is blocked so it cannot interfere
            # with Tor etc) including DNS on the LAN. UDP DNS queries are
            # also allowed.
            outerface ! lo mod owner uid-owner clearnet {
                proto tcp ACCEPT;
                proto udp dport domain ACCEPT;
            }

            # Local network connections should not go through Tor but DNS shall be
            # rejected.
            # (Note that we exclude the VirtualAddrNetwork used for .onion:s here.)
            daddr (10.0.0.0/8 172.16.0.0/12 192.168.0.0/16) @subchain "lan" {
                proto tcp dport domain REJECT;
                proto udp dport domain REJECT;
                ACCEPT;
            }

            # Tor is allowed to do anything it wants to.
            mod owner uid-owner debian-tor ACCEPT;

            protocol icmp icmpv6-type 8 ACCEPT;

            # Everything else is logged and dropped.
            LOG log-prefix "Dropped outbound packet: " log-level debug log-uid;
            REJECT reject-with icmp-port-unreachable;
        }

        chain FORWARD {
            policy DROP;
        }
    }
    table nat {
        chain PREROUTING {
            policy ACCEPT;
        }

        chain POSTROUTING {
            policy ACCEPT;
        }

        chain OUTPUT {
            policy ACCEPT;

            # .onion mapped addresses redirection to Tor.
            daddr 127.192.0.0/10 proto tcp REDIRECT to-ports 9040;

            # Redirect system DNS to Tor's DNSport
            daddr 127.0.0.1 proto udp dport 53 REDIRECT to-ports 5353;
        }
    }
}

# IPv6:
domain ip6 {
    table filter {
        chain INPUT {
            policy DROP;

            # Established connections are accepted.
            mod state state (RELATED ESTABLISHED) ACCEPT;
        }

        chain FORWARD {
            policy DROP;
        }

        chain OUTPUT {
            policy DROP;

            # Established connections are accepted.
            mod state state (RELATED ESTABLISHED) ACCEPT;

            # Everything else is logged and dropped.
            LOG log-prefix "Dropped outbound packet: " log-level debug log-uid;
            REJECT reject-with icmp6-port-unreachable;
        }
    }
}

